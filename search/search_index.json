{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Home \u00b6 Hi!","title":"Home"},{"location":"index.html#home","text":"Hi!","title":"Home"},{"location":"Distro%20Enhancements/arch.html","text":"Arch (and its derivatives) \u00b6 Exact in-order commands for installing pacaur : pacman -S git git clone https://aur.archlinux.org/pacaur.git sudo pacman -S expac jq sudo pacman -S base-devel --needed git clone https://aur.archlinux.org/auracle-git.git cd auracle-git makepkg -si cd .. cd pacaur makepkg -si","title":"Arch (and its derivatives)"},{"location":"Distro%20Enhancements/arch.html#arch-and-its-derivatives","text":"Exact in-order commands for installing pacaur : pacman -S git git clone https://aur.archlinux.org/pacaur.git sudo pacman -S expac jq sudo pacman -S base-devel --needed git clone https://aur.archlinux.org/auracle-git.git cd auracle-git makepkg -si cd .. cd pacaur makepkg -si","title":"Arch (and its derivatives)"},{"location":"Distro%20Enhancements/general.html","text":"Any Distro \u00b6 Battery \u00b6 Install TLP to optimize your battery consumption. Installation steps can be found here . Terminal \u00b6 For the use of multiple terminal sessions in 1 window, consider checking out tmux . It's a \"terminal multiplexer\", allowing you to have multiple terminal panes open on a single screen. To colorize your man page, install most and add this line to your .bashrc : export MANPAGER=\"/usr/bin/most -s\" GRUB \u00b6 To configure your GRUB menu head over to: cd /etc/default/ sudo vim grub Commonly edited settings include: * GRUB_TIMEOUT to set the number of seconds the GRUB menu will be up * GRUB_DEFAULT to choose which OS on the GRUB menu is autoselected. Note, 0 is the topmost level When you're finished with all you're edits, perform the following: sudo upgrade-grub sudo update-grub To customize the look of the menu, check out matter . Code \u00b6 After installing Visual Studio Code, you might have realized that there's an additional bar at the top, using up space. To remove this bar, follow these steps: In the File menu, select File -> Preferences -> Settings Search for window.titlebarstyle Change Window: Title Bar Style to custom Mouse \u00b6 Install key-maper to map the side buttons of your mouse (if there are any).","title":"Any Distro"},{"location":"Distro%20Enhancements/general.html#any-distro","text":"","title":"Any Distro"},{"location":"Distro%20Enhancements/general.html#battery","text":"Install TLP to optimize your battery consumption. Installation steps can be found here .","title":"Battery"},{"location":"Distro%20Enhancements/general.html#terminal","text":"For the use of multiple terminal sessions in 1 window, consider checking out tmux . It's a \"terminal multiplexer\", allowing you to have multiple terminal panes open on a single screen. To colorize your man page, install most and add this line to your .bashrc : export MANPAGER=\"/usr/bin/most -s\"","title":"Terminal"},{"location":"Distro%20Enhancements/general.html#grub","text":"To configure your GRUB menu head over to: cd /etc/default/ sudo vim grub Commonly edited settings include: * GRUB_TIMEOUT to set the number of seconds the GRUB menu will be up * GRUB_DEFAULT to choose which OS on the GRUB menu is autoselected. Note, 0 is the topmost level When you're finished with all you're edits, perform the following: sudo upgrade-grub sudo update-grub To customize the look of the menu, check out matter .","title":"GRUB"},{"location":"Distro%20Enhancements/general.html#code","text":"After installing Visual Studio Code, you might have realized that there's an additional bar at the top, using up space. To remove this bar, follow these steps: In the File menu, select File -> Preferences -> Settings Search for window.titlebarstyle Change Window: Title Bar Style to custom","title":"Code"},{"location":"Distro%20Enhancements/general.html#mouse","text":"Install key-maper to map the side buttons of your mouse (if there are any).","title":"Mouse"},{"location":"Distro%20Enhancements/ubuntu.html","text":"Ubuntu (and its derivatives) \u00b6 Style \u00b6 Install Tweaks to change your UI theme and use Gnome extensions (see below): sudo apt install gnome-tweaks Install gnome extensions at extensions.gnome.org . To customize your taskbar I recommend Dash-to-panel . To learn how to the change the color scheme of your terminal, visit Gogh. Note, if you receive an environment error while installing you may be able to fix it by following this thread. Also note, the terminal you're using must be the Gnome Terminal (which is the default for Ubuntu) or one of these .","title":"Ubuntu (and its derivatives)"},{"location":"Distro%20Enhancements/ubuntu.html#ubuntu-and-its-derivatives","text":"","title":"Ubuntu (and its derivatives)"},{"location":"Distro%20Enhancements/ubuntu.html#style","text":"Install Tweaks to change your UI theme and use Gnome extensions (see below): sudo apt install gnome-tweaks Install gnome extensions at extensions.gnome.org . To customize your taskbar I recommend Dash-to-panel . To learn how to the change the color scheme of your terminal, visit Gogh. Note, if you receive an environment error while installing you may be able to fix it by following this thread. Also note, the terminal you're using must be the Gnome Terminal (which is the default for Ubuntu) or one of these .","title":"Style"},{"location":"General%20Programs/firefox.html","text":"Firefox Shortcuts and Extensions \u00b6 All items listed below are what I've found to be the most useful to remember. There is certainly more to include, but this is a good starting point. Enjoy! Shortcut Keystrokes \u00b6 Keystrokes Action CTRL + t Create new tab (and focus on the address bar) CTRL + w Close current tab CTRL + SHIFT + t Undo closed tab CTRL + n Create new window CTRL + SHIFT + p Create new private window CTRL + SHIFT + w Close window CTRL + SHIFT + n Undo closed window ALT + # Go to tab number # (a number from 0 to 8) ALT + 9 Go to last tab CTRL + TAB Go to the right tab CTRL + TAB + SHIFT Go to the left tab CTRL + l Focus on the address bar CTRL + [ Go back one page CTRL + ] Go forward one page The official and broader list keystrokes can be found here . Extensions \u00b6 Note, these are all open-source add-ons! For the ability to speed-up/speed-down any HTML5 video visit the videospeed add-on For the removal of ads on websites, visit the ublock-origin add-on","title":"Firefox Shortcuts and Extensions"},{"location":"General%20Programs/firefox.html#firefox-shortcuts-and-extensions","text":"All items listed below are what I've found to be the most useful to remember. There is certainly more to include, but this is a good starting point. Enjoy!","title":"Firefox Shortcuts and Extensions"},{"location":"General%20Programs/firefox.html#shortcut-keystrokes","text":"Keystrokes Action CTRL + t Create new tab (and focus on the address bar) CTRL + w Close current tab CTRL + SHIFT + t Undo closed tab CTRL + n Create new window CTRL + SHIFT + p Create new private window CTRL + SHIFT + w Close window CTRL + SHIFT + n Undo closed window ALT + # Go to tab number # (a number from 0 to 8) ALT + 9 Go to last tab CTRL + TAB Go to the right tab CTRL + TAB + SHIFT Go to the left tab CTRL + l Focus on the address bar CTRL + [ Go back one page CTRL + ] Go forward one page The official and broader list keystrokes can be found here .","title":"Shortcut Keystrokes"},{"location":"General%20Programs/firefox.html#extensions","text":"Note, these are all open-source add-ons! For the ability to speed-up/speed-down any HTML5 video visit the videospeed add-on For the removal of ads on websites, visit the ublock-origin add-on","title":"Extensions"},{"location":"General%20Programs/other.html","text":"Other \u00b6 youtube-dl \u00b6 The custom command I use for music: youtube-dl -x --audio-format mp3 --embed-thumbnail --restrict-filenames -o \"~/Music/%(title)s.%(ext)s\" <<URL>> Explanation, in flag order: Download the music only Download the music in MP3 format Set the video's thumbnail as the cover art Give the final file the name of the YouTube video name, minus any non-ASCII chcaracters, and save it into your ~/Music folder","title":"Other"},{"location":"General%20Programs/other.html#other","text":"","title":"Other"},{"location":"General%20Programs/other.html#youtube-dl","text":"The custom command I use for music: youtube-dl -x --audio-format mp3 --embed-thumbnail --restrict-filenames -o \"~/Music/%(title)s.%(ext)s\" <<URL>> Explanation, in flag order: Download the music only Download the music in MP3 format Set the video's thumbnail as the cover art Give the final file the name of the YouTube video name, minus any non-ASCII chcaracters, and save it into your ~/Music folder","title":"youtube-dl"},{"location":"General%20Programs/vim.html","text":"Vim Commands \u00b6 Below are the most useful Vim Commands I've found. Enjoy! At The Terminal \u00b6 Flag Description sudo vim [file] To write on a read-only file (usually has to be done on system files) -M or -R Open file such that modifications are not allowed -x Activate encryption on file --version Print your Vim version In The File \u00b6 Note: * A \"word\" starts/ends at a non-word character, such as a \".\", \"-\", or \")\". * A \"WORD\" starts/ends strictly with a white-space. * For most commands below, a number (#) can precede it to repeat that command that # of times. * There is a difference between typing the capitalized v.s. the non-capitalized version of letter(s) Cursor Movement \u00b6 Keystrokes Action h/j/k/l Move cursor left/down/up/right, respectively CTRL + d Scroll down one half of a screen CTRL + u Scroll up one half of a screen CTRL + f Scroll f orward one screen CTRL + b Scroll b ack one screen W Move cursor to the (Mctt) beginning of the next WORD w Mctt beginning of the next word E Mctt end of the next WORD e Mctt end of the next word B Mctt beginning of the preceding WORD b Mctt beginning of the preceding word 0 Mctt beginning of the line ^ Mctt first non-blank character of the line $ Mctt end of the line :# Mctt line number # G Mctt beginning of the last line of the file gg Mctt beginning of the file % Mctt matching bracket; (){}[] m? Mark the line on where the cursor is with the letter ? '? Mctt line marked m? Inserting \u00b6 Keystrokes Action i Insert before cursor I Insert at the first non-blank character of the line a Append after cursor A Append at the end of the line o Create a line below, and enter insert mode O Create a line above, and enter insert mode Deleting \u00b6 Note: * Any command with d / D can be replaced with c / C . If you use c instead of d , you will immediately enter insert mode after deletion. Keystrokes Action D Delete all line content after cursor dd Delete your current line C Delete the contents of line after the cursor, and enter insert mode cc Delete your current line and enter insert mode x Delete character at cursor X Delete character before cursor Yanking and Putting \u00b6 Note: * To yank means to copy, and to put means to paste. * Deleting acts as yanking too Keystrokes Action y Yank yy Yank your current line p Put what was last yanked, after cursor position P Put what was last yanked, before cursor position Visual Mode \u00b6 Keystrokes Action v Enter visual mode, where you can select text by moving around with h/j/k/l or other cursor movement commands V Visually select your line CTRL + v Enter visual block mode (like visual mode, but you highlight text via one block) Replacing Text \u00b6 Keystrokes Action r Replace 1 character R Replace characters from cursor and onward s Substitute 1 character and continue in insert mode S Substitute entire line, beginning at the beginning of line J Join current and bottom line into one line ~ Invert the case (lowercase/uppercase) of your current character Searching \u00b6 Keystrokes Action /string Search forwards for string ?string Search backwards for string /\\<string/> Strictly searching for string . This means ignoring words that contain \"string\" as part of a bigger word (ie. the mother in motherboard) n Repeat search in the same direction that you initialized N Repeat search in the opposite direction that you initialized Misc. Edits \u00b6 Keystrokes Action u Undo your last change U Undo all changes done to your current line CTRL + r Redo the last undo you did CTRL + a Increment the number under your cursor CTRL + x Decrement the number under your cursor >> or << Shift text to the right or left, respectively In Vim's Command Mode \u00b6 Files \u00b6 Keystrokes Action :w Save changes to file :wq Save changes to file and quit ZZ Save changes to file and quit :w filename Save changes to a new file :f List file information :q! Ignore file changes and quit :x Activate encryption Set \u00b6 Keystrokes Action :set ic and :set noic Case sensitive searches :set nu and :set nonu Display line numbers :set key= Set the password for your encrypted file. An empty key option will disable encryption :set list Show whitespace (kinda) :set syntax=[programmingLanguage] Set the syntax of your script to that another programming language Find and Replace \u00b6 Keystrokes Action %s/aaa/bbb/ For all lines in a file, find string 'aaa' an replace with string 'bbb', for the first instance on a line :%s/aaa/bbb/g For all lines in a file, find string 'aaa' an replace with string 'bbb', for all instances on a line :%s/aaa/bbb/gc For all lines in a file, find string 'aaa' an replace with string 'bbb', for all instances on a line. Ask for confirmation :%s/aaa/bbb/gi For all lines in a file, find string 'aaa' an replace with string 'bbb', for all instances on a line. Case insensitive :#,##stuff Between line # and line ##, do stuff , which are the commands listed above (exluding the % ) Misc. Commands \u00b6 Keystrokes Action :! command Run any command inside Vim (Recall, your current directory is with respect to that of your current file) :synax off and :syntax on Turn syntax highlighting off and on Extras \u00b6 Settings \u00b6 To show line numbers: 1) Go to vim ~/.vimrc 2) Append set number Information \u00b6 In insert mode, Vim uses some emacs shortcuts. Visit this page for more information. If you have multiple windows open, CTRL+w (when in editing mode) to toggle \"Window switch mode\" and then use hjkl to move to a specific window. External Learning Resources \u00b6 To learn more advanced VIM commands and get more practice with it, feel free to visit the following resources I found helpful: Typing vimtutor on the terminal will bring up Vim's mini-tutorial. Note, most commands covered there have been covered here. yolinux vimgenius Plugins \u00b6 Explore vimawesome","title":"Vim Commands"},{"location":"General%20Programs/vim.html#vim-commands","text":"Below are the most useful Vim Commands I've found. Enjoy!","title":"Vim Commands"},{"location":"General%20Programs/vim.html#at-the-terminal","text":"Flag Description sudo vim [file] To write on a read-only file (usually has to be done on system files) -M or -R Open file such that modifications are not allowed -x Activate encryption on file --version Print your Vim version","title":"At The Terminal"},{"location":"General%20Programs/vim.html#in-the-file","text":"Note: * A \"word\" starts/ends at a non-word character, such as a \".\", \"-\", or \")\". * A \"WORD\" starts/ends strictly with a white-space. * For most commands below, a number (#) can precede it to repeat that command that # of times. * There is a difference between typing the capitalized v.s. the non-capitalized version of letter(s)","title":"In The File"},{"location":"General%20Programs/vim.html#cursor-movement","text":"Keystrokes Action h/j/k/l Move cursor left/down/up/right, respectively CTRL + d Scroll down one half of a screen CTRL + u Scroll up one half of a screen CTRL + f Scroll f orward one screen CTRL + b Scroll b ack one screen W Move cursor to the (Mctt) beginning of the next WORD w Mctt beginning of the next word E Mctt end of the next WORD e Mctt end of the next word B Mctt beginning of the preceding WORD b Mctt beginning of the preceding word 0 Mctt beginning of the line ^ Mctt first non-blank character of the line $ Mctt end of the line :# Mctt line number # G Mctt beginning of the last line of the file gg Mctt beginning of the file % Mctt matching bracket; (){}[] m? Mark the line on where the cursor is with the letter ? '? Mctt line marked m?","title":"Cursor Movement"},{"location":"General%20Programs/vim.html#inserting","text":"Keystrokes Action i Insert before cursor I Insert at the first non-blank character of the line a Append after cursor A Append at the end of the line o Create a line below, and enter insert mode O Create a line above, and enter insert mode","title":"Inserting"},{"location":"General%20Programs/vim.html#deleting","text":"Note: * Any command with d / D can be replaced with c / C . If you use c instead of d , you will immediately enter insert mode after deletion. Keystrokes Action D Delete all line content after cursor dd Delete your current line C Delete the contents of line after the cursor, and enter insert mode cc Delete your current line and enter insert mode x Delete character at cursor X Delete character before cursor","title":"Deleting"},{"location":"General%20Programs/vim.html#yanking-and-putting","text":"Note: * To yank means to copy, and to put means to paste. * Deleting acts as yanking too Keystrokes Action y Yank yy Yank your current line p Put what was last yanked, after cursor position P Put what was last yanked, before cursor position","title":"Yanking and Putting"},{"location":"General%20Programs/vim.html#visual-mode","text":"Keystrokes Action v Enter visual mode, where you can select text by moving around with h/j/k/l or other cursor movement commands V Visually select your line CTRL + v Enter visual block mode (like visual mode, but you highlight text via one block)","title":"Visual Mode"},{"location":"General%20Programs/vim.html#replacing-text","text":"Keystrokes Action r Replace 1 character R Replace characters from cursor and onward s Substitute 1 character and continue in insert mode S Substitute entire line, beginning at the beginning of line J Join current and bottom line into one line ~ Invert the case (lowercase/uppercase) of your current character","title":"Replacing Text"},{"location":"General%20Programs/vim.html#searching","text":"Keystrokes Action /string Search forwards for string ?string Search backwards for string /\\<string/> Strictly searching for string . This means ignoring words that contain \"string\" as part of a bigger word (ie. the mother in motherboard) n Repeat search in the same direction that you initialized N Repeat search in the opposite direction that you initialized","title":"Searching"},{"location":"General%20Programs/vim.html#misc-edits","text":"Keystrokes Action u Undo your last change U Undo all changes done to your current line CTRL + r Redo the last undo you did CTRL + a Increment the number under your cursor CTRL + x Decrement the number under your cursor >> or << Shift text to the right or left, respectively","title":"Misc. Edits"},{"location":"General%20Programs/vim.html#in-vims-command-mode","text":"","title":"In Vim's Command Mode"},{"location":"General%20Programs/vim.html#files","text":"Keystrokes Action :w Save changes to file :wq Save changes to file and quit ZZ Save changes to file and quit :w filename Save changes to a new file :f List file information :q! Ignore file changes and quit :x Activate encryption","title":"Files"},{"location":"General%20Programs/vim.html#set","text":"Keystrokes Action :set ic and :set noic Case sensitive searches :set nu and :set nonu Display line numbers :set key= Set the password for your encrypted file. An empty key option will disable encryption :set list Show whitespace (kinda) :set syntax=[programmingLanguage] Set the syntax of your script to that another programming language","title":"Set"},{"location":"General%20Programs/vim.html#find-and-replace","text":"Keystrokes Action %s/aaa/bbb/ For all lines in a file, find string 'aaa' an replace with string 'bbb', for the first instance on a line :%s/aaa/bbb/g For all lines in a file, find string 'aaa' an replace with string 'bbb', for all instances on a line :%s/aaa/bbb/gc For all lines in a file, find string 'aaa' an replace with string 'bbb', for all instances on a line. Ask for confirmation :%s/aaa/bbb/gi For all lines in a file, find string 'aaa' an replace with string 'bbb', for all instances on a line. Case insensitive :#,##stuff Between line # and line ##, do stuff , which are the commands listed above (exluding the % )","title":"Find and Replace"},{"location":"General%20Programs/vim.html#misc-commands","text":"Keystrokes Action :! command Run any command inside Vim (Recall, your current directory is with respect to that of your current file) :synax off and :syntax on Turn syntax highlighting off and on","title":"Misc. Commands"},{"location":"General%20Programs/vim.html#extras","text":"","title":"Extras"},{"location":"General%20Programs/vim.html#settings","text":"To show line numbers: 1) Go to vim ~/.vimrc 2) Append set number","title":"Settings"},{"location":"General%20Programs/vim.html#information","text":"In insert mode, Vim uses some emacs shortcuts. Visit this page for more information. If you have multiple windows open, CTRL+w (when in editing mode) to toggle \"Window switch mode\" and then use hjkl to move to a specific window.","title":"Information"},{"location":"General%20Programs/vim.html#external-learning-resources","text":"To learn more advanced VIM commands and get more practice with it, feel free to visit the following resources I found helpful: Typing vimtutor on the terminal will bring up Vim's mini-tutorial. Note, most commands covered there have been covered here. yolinux vimgenius","title":"External Learning Resources"},{"location":"General%20Programs/vim.html#plugins","text":"Explore vimawesome","title":"Plugins"},{"location":"Linux%20Adminstration/fhs-summaries.html","text":"File System Hierarchy \u00b6 Typical GNU/Linux File System Hierarchy (FHS), simplified as much as possible, with relavent examples. /bin \u00b6 Full Name: Binaries Notes: * Essential command binaries reside here. * These are available for all users. Example(s): Things like ls and cat are here. /sbin \u00b6 Full Name: System Binaries Notes: * Only system administrators can edit these files (i.e. have sudo privileges) * Contains binary executables. Example(s): reboot , fdisk , ifconfig , etc. /boot \u00b6 Full Name: Boot Notes: * Contains everything OS needs to boot. * Kernel initrd, vmlinux, and GRUB files are located here. * Example(s): Files such as initrd.img-2.6.32-24-generic /dev \u00b6 Full Name: Devices Notes: * Where device files live. * Includes terminal interfaces and devices externally connected to your system. * Example(s): On the hardware side, you can find the files related to disks and their partitions, USB peripherals, etc. You can also find the files for terminal interfaces, such as /dev/tty1 . /etc \u00b6 Full Name: Etcetera Notes: * For system-wide configurations of apps. * Contains files required by all programs. * This also contains startup and shutdown shell scripts used to start and stop individual programs, respectively. Example(s): n/a /home \u00b6 Full Name: Home Notes: * Contains the directories of individual users. Example(s): /home/linus /lib \u00b6 Full Name: Library Notes: * Contains file applications that can be used to perform various functions. * Libraries essential for the binaries in /bin and /sbin are here. * Library filenames are either in ld* or lib*.so.* format. Example(s): - /mnt \u00b6 Full Name: Mount Notes: * Where the system mounts removable media * The data of flash drives can be found here. Example(s): - /media \u00b6 Full Name: Media Notes: * Where users can mount devices manually Example(s): - /opt \u00b6 Full Name: Optional Notes: * Where software from 3rd parties resides, as well as some repo packages. Example(s): - /proc \u00b6 Full Name: Processes Notes: * Here lies a virtual filesystem that contains process and kernel information in the form of files. This corresponds to a \"procfs mount\". * Where you'd find pseudo files that contain information about running system processes and system resources. Example(s): * If you navigate to the system monitor you'll spot out process IDs. Those IDs exists as folders in /proc * Contains CPU information * Contains Uptime information /root \u00b6 Full Name: Root Notes: * Is the root user's home folder. * You need root permission to modify these contents. Example(s): - /run \u00b6 Full Name: Run Notes: * It's a \"tempfs\" filesystem (i.e. runs in RAM, and everything here is wiped when your system shuts down). * Stores volatile runtime data. Example(s): /snap \u00b6 Full Name: Snap Notes: * Where snap packages reside. These are mainly maintained by Ubuntu. Example(s): - /srv \u00b6 Full Name: Service Notes: * Contains site-specific data served by your system, such as data, scripts for web servers, etc. Example(s): - /tmp \u00b6 Full Name: Temporary Notes: * Contains files that are temporarily used by applications. * Files under this directory are deleted when system shutsdown. Example(s): The autosave feature of some applications often make use of this folder. /sys \u00b6 Full Name: System Notes: * Interacts with the kernel. * Similar to /run in that it's temporary. Example(s): - /usr \u00b6 Full Name: User (but also referred to as Unix Service Resource) Notes: * Contains the majority of user utilities and applications. * Apps here are considered non-essential for system operations. * Specific sub-folders: * /usr/bin contains binary files for user programs/commands. * /usr/sbin contains binary files for system admins. * /usr/lib contains libraries for /usr/bin and /usr/sbin . * /usr/local contains user programs that you install from source. * /usr/src holds the Linux kernel sources, header-files, and documentation. Example(s): Some good to know sub-folders are /usr/local (someapp config files lie here), /user/bin (commands that user installed can be found here).","title":"File System Hierarchy"},{"location":"Linux%20Adminstration/fhs-summaries.html#file-system-hierarchy","text":"Typical GNU/Linux File System Hierarchy (FHS), simplified as much as possible, with relavent examples.","title":"File System Hierarchy"},{"location":"Linux%20Adminstration/fhs-summaries.html#bin","text":"Full Name: Binaries Notes: * Essential command binaries reside here. * These are available for all users. Example(s): Things like ls and cat are here.","title":"/bin"},{"location":"Linux%20Adminstration/fhs-summaries.html#sbin","text":"Full Name: System Binaries Notes: * Only system administrators can edit these files (i.e. have sudo privileges) * Contains binary executables. Example(s): reboot , fdisk , ifconfig , etc.","title":"/sbin"},{"location":"Linux%20Adminstration/fhs-summaries.html#boot","text":"Full Name: Boot Notes: * Contains everything OS needs to boot. * Kernel initrd, vmlinux, and GRUB files are located here. * Example(s): Files such as initrd.img-2.6.32-24-generic","title":"/boot"},{"location":"Linux%20Adminstration/fhs-summaries.html#dev","text":"Full Name: Devices Notes: * Where device files live. * Includes terminal interfaces and devices externally connected to your system. * Example(s): On the hardware side, you can find the files related to disks and their partitions, USB peripherals, etc. You can also find the files for terminal interfaces, such as /dev/tty1 .","title":"/dev"},{"location":"Linux%20Adminstration/fhs-summaries.html#etc","text":"Full Name: Etcetera Notes: * For system-wide configurations of apps. * Contains files required by all programs. * This also contains startup and shutdown shell scripts used to start and stop individual programs, respectively. Example(s): n/a","title":"/etc"},{"location":"Linux%20Adminstration/fhs-summaries.html#home","text":"Full Name: Home Notes: * Contains the directories of individual users. Example(s): /home/linus","title":"/home"},{"location":"Linux%20Adminstration/fhs-summaries.html#lib","text":"Full Name: Library Notes: * Contains file applications that can be used to perform various functions. * Libraries essential for the binaries in /bin and /sbin are here. * Library filenames are either in ld* or lib*.so.* format. Example(s): -","title":"/lib"},{"location":"Linux%20Adminstration/fhs-summaries.html#mnt","text":"Full Name: Mount Notes: * Where the system mounts removable media * The data of flash drives can be found here. Example(s): -","title":"/mnt"},{"location":"Linux%20Adminstration/fhs-summaries.html#media","text":"Full Name: Media Notes: * Where users can mount devices manually Example(s): -","title":"/media"},{"location":"Linux%20Adminstration/fhs-summaries.html#opt","text":"Full Name: Optional Notes: * Where software from 3rd parties resides, as well as some repo packages. Example(s): -","title":"/opt"},{"location":"Linux%20Adminstration/fhs-summaries.html#proc","text":"Full Name: Processes Notes: * Here lies a virtual filesystem that contains process and kernel information in the form of files. This corresponds to a \"procfs mount\". * Where you'd find pseudo files that contain information about running system processes and system resources. Example(s): * If you navigate to the system monitor you'll spot out process IDs. Those IDs exists as folders in /proc * Contains CPU information * Contains Uptime information","title":"/proc"},{"location":"Linux%20Adminstration/fhs-summaries.html#root","text":"Full Name: Root Notes: * Is the root user's home folder. * You need root permission to modify these contents. Example(s): -","title":"/root"},{"location":"Linux%20Adminstration/fhs-summaries.html#run","text":"Full Name: Run Notes: * It's a \"tempfs\" filesystem (i.e. runs in RAM, and everything here is wiped when your system shuts down). * Stores volatile runtime data. Example(s):","title":"/run"},{"location":"Linux%20Adminstration/fhs-summaries.html#snap","text":"Full Name: Snap Notes: * Where snap packages reside. These are mainly maintained by Ubuntu. Example(s): -","title":"/snap"},{"location":"Linux%20Adminstration/fhs-summaries.html#srv","text":"Full Name: Service Notes: * Contains site-specific data served by your system, such as data, scripts for web servers, etc. Example(s): -","title":"/srv"},{"location":"Linux%20Adminstration/fhs-summaries.html#tmp","text":"Full Name: Temporary Notes: * Contains files that are temporarily used by applications. * Files under this directory are deleted when system shutsdown. Example(s): The autosave feature of some applications often make use of this folder.","title":"/tmp"},{"location":"Linux%20Adminstration/fhs-summaries.html#sys","text":"Full Name: System Notes: * Interacts with the kernel. * Similar to /run in that it's temporary. Example(s): -","title":"/sys"},{"location":"Linux%20Adminstration/fhs-summaries.html#usr","text":"Full Name: User (but also referred to as Unix Service Resource) Notes: * Contains the majority of user utilities and applications. * Apps here are considered non-essential for system operations. * Specific sub-folders: * /usr/bin contains binary files for user programs/commands. * /usr/sbin contains binary files for system admins. * /usr/lib contains libraries for /usr/bin and /usr/sbin . * /usr/local contains user programs that you install from source. * /usr/src holds the Linux kernel sources, header-files, and documentation. Example(s): Some good to know sub-folders are /usr/local (someapp config files lie here), /user/bin (commands that user installed can be found here).","title":"/usr"},{"location":"Terminal/commands.html","text":"Commands \u00b6 Core Commands \u00b6 Command Result man Open the manual/help page for a given command whatis A TL;DR man page for a command cd Change directory ls List directories pwd Print working Directory rm Remove file rmdir Remove directory mkdir Make directory mv Move directory. Can be used to rename files too (set the source as the destination) Good to Know Commands/Subcommands \u00b6 Command Result rm -r Remove a directory and all files that are in it. Also recursively deletes nested directories rm -I or rm -i To confirm each file removal rm -v State that the file was removed rm -f To avoid being asked about removing files, add the -f (\"force\") option. grep Search for text in files find Search for filenames, inside the directory you're currently at file name Tells you the file type of name which <...> Used to find the location of executable functions echo Display text/string that is passed as an argument echo \"Hello!\" >> myfile.txt Append text to the end of the file. Note that >> means adding a new line to the file while > simply overwrites everything. echo $(( stuff )) To do math with integers echo $VAR Output the value of the VAR variable. For instance. echo $HOME tells you what your home directory is echo -n [...] Do not output to a newline, output to the current one echo -n [...] Enable the interpretation of backslash escapes history Print your command line history ls -l Print a list of directories, but with more of their metadata ls -lh Same as above, but more human-readable ls -F Tell the difference between files and directories ls -a Show all files, including dot files ls -t New files appear first ls -R Recursively list (see subfolders and their contents, recursively) ln -s <full file directory> <new directory>shortcut_name Create a symbolic (or soft) link. The file directory should be written out in full (ie. including /home/user/\u2026). Note, the directory of a shortcut is often placed in the /usr/bin folder, so you can type \"shortcut_name\" anywhere in the terminal to access it. Note, A symbolic or soft link is an actual link to the original file, whereas a hard link is a mirror copy of the original file. readlink -m <shortcut name> Prints the directory of where that shortcut name is cp ` Copy target file/directory to destination directory cp -r <...> <...> Copy directories along with their contents diff --report-identical-files <...> <...> Compares two files to see if they match in content head Print the first 10 lines of a file. You can also add -n # , where # is the amount of lines you'd like to show tail Print the last 10 lines of a file. You can add -n # too touch file.txt Creates a file with that name. Also updates the aces data/ modification date. less Eextends the capabilities of more. The latter was created to view the content of a file one screenful at a time. less adds features such as backward movements and better memory management. Usually used for longer files cat _Cat_enates (concatenates) files and prints the result onto the standard output. This is usally used for viewing a short file on the terminal mkdir -p parent/child Create a \u201cchain\u201d of directories rmdir Remove a directory mount / umount Mount/ unmount devices jobs Lists all jobs bg # Places the current (if there's one) or specified job in the background, where # is the job ID fg # Brings the current (if there's one) or s kill %# Terminate a specific job # killall Kill all jobs clear Clear the screen Rare But Powerful Commands \u00b6 Command Description wget <url> Used to download files from the internet tee file Output to terminal and save to file nmcli Network/wifi/ethernet information HISTTIMEFORMAT=\"%F %T \" Set the Bash history to show a timestamp for your command history (for the current terminal session only). Now type history and you should see timestamp for your Bash history. export Export is 11v a built-in command of the Bash shell. It is used to mark variables and functions to be passed to child processes. Examples include $HOME and $PATH. wc Print info about a file df Display disk space usage chmod +x [file] To make file executable lsusb Display which USB ports are being used and by what passwd To change your password uname To see what kernel version you have on your system top Show processes information env Show environment variables sort Sort lines of text files More! \u00b6 For an overwhelming number of other commands, I recommend this source .","title":"Commands"},{"location":"Terminal/commands.html#commands","text":"","title":"Commands"},{"location":"Terminal/commands.html#core-commands","text":"Command Result man Open the manual/help page for a given command whatis A TL;DR man page for a command cd Change directory ls List directories pwd Print working Directory rm Remove file rmdir Remove directory mkdir Make directory mv Move directory. Can be used to rename files too (set the source as the destination)","title":"Core Commands"},{"location":"Terminal/commands.html#good-to-know-commandssubcommands","text":"Command Result rm -r Remove a directory and all files that are in it. Also recursively deletes nested directories rm -I or rm -i To confirm each file removal rm -v State that the file was removed rm -f To avoid being asked about removing files, add the -f (\"force\") option. grep Search for text in files find Search for filenames, inside the directory you're currently at file name Tells you the file type of name which <...> Used to find the location of executable functions echo Display text/string that is passed as an argument echo \"Hello!\" >> myfile.txt Append text to the end of the file. Note that >> means adding a new line to the file while > simply overwrites everything. echo $(( stuff )) To do math with integers echo $VAR Output the value of the VAR variable. For instance. echo $HOME tells you what your home directory is echo -n [...] Do not output to a newline, output to the current one echo -n [...] Enable the interpretation of backslash escapes history Print your command line history ls -l Print a list of directories, but with more of their metadata ls -lh Same as above, but more human-readable ls -F Tell the difference between files and directories ls -a Show all files, including dot files ls -t New files appear first ls -R Recursively list (see subfolders and their contents, recursively) ln -s <full file directory> <new directory>shortcut_name Create a symbolic (or soft) link. The file directory should be written out in full (ie. including /home/user/\u2026). Note, the directory of a shortcut is often placed in the /usr/bin folder, so you can type \"shortcut_name\" anywhere in the terminal to access it. Note, A symbolic or soft link is an actual link to the original file, whereas a hard link is a mirror copy of the original file. readlink -m <shortcut name> Prints the directory of where that shortcut name is cp ` Copy target file/directory to destination directory cp -r <...> <...> Copy directories along with their contents diff --report-identical-files <...> <...> Compares two files to see if they match in content head Print the first 10 lines of a file. You can also add -n # , where # is the amount of lines you'd like to show tail Print the last 10 lines of a file. You can add -n # too touch file.txt Creates a file with that name. Also updates the aces data/ modification date. less Eextends the capabilities of more. The latter was created to view the content of a file one screenful at a time. less adds features such as backward movements and better memory management. Usually used for longer files cat _Cat_enates (concatenates) files and prints the result onto the standard output. This is usally used for viewing a short file on the terminal mkdir -p parent/child Create a \u201cchain\u201d of directories rmdir Remove a directory mount / umount Mount/ unmount devices jobs Lists all jobs bg # Places the current (if there's one) or specified job in the background, where # is the job ID fg # Brings the current (if there's one) or s kill %# Terminate a specific job # killall Kill all jobs clear Clear the screen","title":"Good to Know Commands/Subcommands"},{"location":"Terminal/commands.html#rare-but-powerful-commands","text":"Command Description wget <url> Used to download files from the internet tee file Output to terminal and save to file nmcli Network/wifi/ethernet information HISTTIMEFORMAT=\"%F %T \" Set the Bash history to show a timestamp for your command history (for the current terminal session only). Now type history and you should see timestamp for your Bash history. export Export is 11v a built-in command of the Bash shell. It is used to mark variables and functions to be passed to child processes. Examples include $HOME and $PATH. wc Print info about a file df Display disk space usage chmod +x [file] To make file executable lsusb Display which USB ports are being used and by what passwd To change your password uname To see what kernel version you have on your system top Show processes information env Show environment variables sort Sort lines of text files","title":"Rare But Powerful Commands"},{"location":"Terminal/commands.html#more","text":"For an overwhelming number of other commands, I recommend this source .","title":"More!"},{"location":"Terminal/forewarning.html","text":"Forewarning \u00b6 All of these notes are based off the gnome-terminal, running on Ubuntu 20, with bash. Some of these may not work outside this specific configuration.","title":"Forewarning"},{"location":"Terminal/forewarning.html#forewarning","text":"All of these notes are based off the gnome-terminal, running on Ubuntu 20, with bash. Some of these may not work outside this specific configuration.","title":"Forewarning"},{"location":"Terminal/keystrokes.html","text":"Keystrokes \u00b6 These keystrokes are applicable in Bash's Emacs-mode. This list is not complete, these keystrokes represent the ones that I most often use and recommend memorizing. I organized them in order of usage Formatting: Capitalized words represent special keyboard keys. Some are self explanatory (e.g. SHIFT is the shift key) while others may be confusing. Those are described below: UP = up arrow key DOWN = down arrow key LEFT = left arrow key RIGHT = right arrow key Keystrokes that require multiple keys combines those with plus signs (i.e. + ). Literal plus keys are denoted with PLUS . Lowercase letters represent pressing the letter in its lowercase form (i.e. holding SHIFT while pressing the letter) Capitalized letters represent pressing the letter in its capitalized form (i.e. holding SHIFT while pressing the letter) Bold words/letters in the action description are used to point out the keystroke's main attribute(s) Frequenly Used \u00b6 Cursor Movement \u00b6 Keystrokes Action: \"Move cursor...\" ALT + f one word f orward ALT + b one word b ackward CTRL + e to the e nd of the line CTRL + a to the st a rt of the line CTRL + p or UP one line u p CTRL + n or DOWN one line dow n Deletion and Buffers \u00b6 Keystrokes Action CTRL + w Delete the word portion that's before the cursor (If cursor is at a space, deletes all of word) ALT + d Delete the word portion that's after the cursor (If cursor is at a space, deletes all of word) CTRL + u Delete text from the beginning of the line up to the cursor CTRL + k Delete text from the cursor up to the end of the line CTRL + y Y ank (copy) the content of the buffer, and push (paste) it at the cursor Moderately Used \u00b6 Process Control \u00b6 Keystrokes Action CTRL + c Kill whatever process is running in the foreground CTRL + z Pause the current foreground process, and send it to the background CTRL + d Acts as the end-of-input character, performing the equivalent of a typical program's q , quit , exit , etc. With this, you're telling a process that your input is finished. Psrticularly useful for closing the terminal/other processes (Python subshell, etc.) CTRL + s Stop all output to the screen. This is useful when running commands that are very verbose CTRL + q Resume output to the screen (after having stopped it with CTRL + s ) Extras \u00b6 Keystrokes Action CTRL + l Clear the screen (history isn't erased, it's just pushed up) !! Run the previous command you ran ^abc^xyz Run the previous command you ran but replace the first occurrence of abc with xyz CTRL + _ Undo the last letter(s) you typed into the command line Alt + r Cancel all changes you've made to your line, putting it back into its original form Rarely Used \u00b6 Searching \u00b6 Keystrokes Action CTRL + r Search \"up\" through your terminal history CTRL + j Leave history searching mode, without running a command CTRL + g Cancel the search and return to your original line CTRL + o Run the command that you found Special Keys \u00b6 Keystrokes Action CTRL + j or CTRL + m Same as ENTER/RETURN key CTRL + [ Same as the ESC key Further Suggestions \u00b6 Emacs-Mode vs Vi-Mode \u00b6 All the above keystrokes assume that Bash is running in its default Emacs setting. It's possible to switch to Vi shortcuts as so: set -o vi . Then, return to Emacs is via: set -o emacs . More Keystrokes \u00b6 Below are external resources where you can find a variety of more keystrokes: * Github Gift Page * ss64","title":"Keystrokes"},{"location":"Terminal/keystrokes.html#keystrokes","text":"These keystrokes are applicable in Bash's Emacs-mode. This list is not complete, these keystrokes represent the ones that I most often use and recommend memorizing. I organized them in order of usage Formatting: Capitalized words represent special keyboard keys. Some are self explanatory (e.g. SHIFT is the shift key) while others may be confusing. Those are described below: UP = up arrow key DOWN = down arrow key LEFT = left arrow key RIGHT = right arrow key Keystrokes that require multiple keys combines those with plus signs (i.e. + ). Literal plus keys are denoted with PLUS . Lowercase letters represent pressing the letter in its lowercase form (i.e. holding SHIFT while pressing the letter) Capitalized letters represent pressing the letter in its capitalized form (i.e. holding SHIFT while pressing the letter) Bold words/letters in the action description are used to point out the keystroke's main attribute(s)","title":"Keystrokes"},{"location":"Terminal/keystrokes.html#frequenly-used","text":"","title":"Frequenly Used"},{"location":"Terminal/keystrokes.html#cursor-movement","text":"Keystrokes Action: \"Move cursor...\" ALT + f one word f orward ALT + b one word b ackward CTRL + e to the e nd of the line CTRL + a to the st a rt of the line CTRL + p or UP one line u p CTRL + n or DOWN one line dow n","title":"Cursor Movement"},{"location":"Terminal/keystrokes.html#deletion-and-buffers","text":"Keystrokes Action CTRL + w Delete the word portion that's before the cursor (If cursor is at a space, deletes all of word) ALT + d Delete the word portion that's after the cursor (If cursor is at a space, deletes all of word) CTRL + u Delete text from the beginning of the line up to the cursor CTRL + k Delete text from the cursor up to the end of the line CTRL + y Y ank (copy) the content of the buffer, and push (paste) it at the cursor","title":"Deletion and Buffers"},{"location":"Terminal/keystrokes.html#moderately-used","text":"","title":"Moderately Used"},{"location":"Terminal/keystrokes.html#process-control","text":"Keystrokes Action CTRL + c Kill whatever process is running in the foreground CTRL + z Pause the current foreground process, and send it to the background CTRL + d Acts as the end-of-input character, performing the equivalent of a typical program's q , quit , exit , etc. With this, you're telling a process that your input is finished. Psrticularly useful for closing the terminal/other processes (Python subshell, etc.) CTRL + s Stop all output to the screen. This is useful when running commands that are very verbose CTRL + q Resume output to the screen (after having stopped it with CTRL + s )","title":"Process Control"},{"location":"Terminal/keystrokes.html#extras","text":"Keystrokes Action CTRL + l Clear the screen (history isn't erased, it's just pushed up) !! Run the previous command you ran ^abc^xyz Run the previous command you ran but replace the first occurrence of abc with xyz CTRL + _ Undo the last letter(s) you typed into the command line Alt + r Cancel all changes you've made to your line, putting it back into its original form","title":"Extras"},{"location":"Terminal/keystrokes.html#rarely-used","text":"","title":"Rarely Used"},{"location":"Terminal/keystrokes.html#searching","text":"Keystrokes Action CTRL + r Search \"up\" through your terminal history CTRL + j Leave history searching mode, without running a command CTRL + g Cancel the search and return to your original line CTRL + o Run the command that you found","title":"Searching"},{"location":"Terminal/keystrokes.html#special-keys","text":"Keystrokes Action CTRL + j or CTRL + m Same as ENTER/RETURN key CTRL + [ Same as the ESC key","title":"Special Keys"},{"location":"Terminal/keystrokes.html#further-suggestions","text":"","title":"Further Suggestions"},{"location":"Terminal/keystrokes.html#emacs-mode-vs-vi-mode","text":"All the above keystrokes assume that Bash is running in its default Emacs setting. It's possible to switch to Vi shortcuts as so: set -o vi . Then, return to Emacs is via: set -o emacs .","title":"Emacs-Mode vs Vi-Mode"},{"location":"Terminal/keystrokes.html#more-keystrokes","text":"Below are external resources where you can find a variety of more keystrokes: * Github Gift Page * ss64","title":"More Keystrokes"},{"location":"Terminal/syntax.html","text":"Syntax \u00b6 General \u00b6 To copy text from the terminal, use CTRL + SHIFT + C . Likewise, to paste into the terminal, use CTRL + SHIFT + V . Anatomy of a command: command -flags --flags args Single-character flags can be combined (e.g. -a -b into -ab ) Double-character flags indicate a whole word option (e.g. --clean ) For programs that don't have a man page, you can try the following: program -h or program --help A single hyphen ( - ) can be followed by multiple single-character flags, while a double hyphen ( -- ) prefixes a single multicharacter option. Piping ( | ) connects the input and output of two commands. When piping, the output of the 1st program is sent to the input of the 2nd program. To start a program/command in a subshell, end it with an ampersand & . This essentially runs it in the background . If you ever see a > in the terminal it's because the shell is now waiting on input. Wildcards A wildcard is a symbol that takes the place of an unknown character or set of characters. The two most common wildcards are the asterisk ( * ) and question mark ( ? ). An * represents any number of unknown characters. Use it at the end of an incomplete filename if you're only interested in filenames that begin with what came before the * . The ordering works vice versa too. An ? represents one unknown character. Use it when you're unsure of a few characters. You can have multiple ? adjacent to eachother.https://ss64.com/bash/ my\\ new\\ file.txt or \"my new file.txt\" is an example of how to use literal spaces. Operators used to combine commands: A ; B -- Run A and then B, regardless if A succeeds or fails A && B -- Run B only if A succeeds (acts like an AND) A || B -- Run B only if A fails (acts like an OR) sh vs ./ : Running sh script makes dash interpret that script ./ script tries to find out which interpreter to use by looking at the first line (the bang line, e.g. #!/bin/bash ), as opposed to running that script. Difference between sourcing and executing a script: Sourcing a script will run the commands in the current shell process, and changes to the environment take effect only in the current shell. Executing a script will run the commands in a new shell, and when the script is done the new shell is terminated Rule of thumb : Use source if you want the script to change the environment in your currently running shell, use execute otherwise. To have a command span multiple lines, use a backslash ( \\ ) at the end of each line you're using or a single quote ( ' ) at the start and end lines. (With this, your're basically escaping the ENTER key) Command substitution allows the output of a command to replace the command itself. This can be done as follows: $(command) or `command` Process substitution allows the input or output of a command to appear as a file. If >(list) is used, writing to the file will provide input for a list. If <(list) is used, the file passed as an argument will be read to obtain the output of list. [This one needs a bit more explaining] Directory Shortcuts \u00b6 Directory Where it leads to ~ Home directory / Root directory . Working (or current) directory .. Parent directory - Previous directory (only for cd) Brace Expansion \u00b6 Below brace exanpsion will be described via the following set of examples Take careful notice on the spacing, it's important Example Result and/or Comments echo \"I love \"{Bach,Beethoven,Brahms} \"I love Bach I love Beethoven I love Brahms\" echo {a..z} \"a b c d e f g h i j k l m n o p q r s t u v w x y z\" echo {1..9} \"1 2 3 4 5 6 7 8 9\" mkdir {2008..2017}-{01-12} Makes directories for all 12 months in all those years","title":"Syntax"},{"location":"Terminal/syntax.html#syntax","text":"","title":"Syntax"},{"location":"Terminal/syntax.html#general","text":"To copy text from the terminal, use CTRL + SHIFT + C . Likewise, to paste into the terminal, use CTRL + SHIFT + V . Anatomy of a command: command -flags --flags args Single-character flags can be combined (e.g. -a -b into -ab ) Double-character flags indicate a whole word option (e.g. --clean ) For programs that don't have a man page, you can try the following: program -h or program --help A single hyphen ( - ) can be followed by multiple single-character flags, while a double hyphen ( -- ) prefixes a single multicharacter option. Piping ( | ) connects the input and output of two commands. When piping, the output of the 1st program is sent to the input of the 2nd program. To start a program/command in a subshell, end it with an ampersand & . This essentially runs it in the background . If you ever see a > in the terminal it's because the shell is now waiting on input. Wildcards A wildcard is a symbol that takes the place of an unknown character or set of characters. The two most common wildcards are the asterisk ( * ) and question mark ( ? ). An * represents any number of unknown characters. Use it at the end of an incomplete filename if you're only interested in filenames that begin with what came before the * . The ordering works vice versa too. An ? represents one unknown character. Use it when you're unsure of a few characters. You can have multiple ? adjacent to eachother.https://ss64.com/bash/ my\\ new\\ file.txt or \"my new file.txt\" is an example of how to use literal spaces. Operators used to combine commands: A ; B -- Run A and then B, regardless if A succeeds or fails A && B -- Run B only if A succeeds (acts like an AND) A || B -- Run B only if A fails (acts like an OR) sh vs ./ : Running sh script makes dash interpret that script ./ script tries to find out which interpreter to use by looking at the first line (the bang line, e.g. #!/bin/bash ), as opposed to running that script. Difference between sourcing and executing a script: Sourcing a script will run the commands in the current shell process, and changes to the environment take effect only in the current shell. Executing a script will run the commands in a new shell, and when the script is done the new shell is terminated Rule of thumb : Use source if you want the script to change the environment in your currently running shell, use execute otherwise. To have a command span multiple lines, use a backslash ( \\ ) at the end of each line you're using or a single quote ( ' ) at the start and end lines. (With this, your're basically escaping the ENTER key) Command substitution allows the output of a command to replace the command itself. This can be done as follows: $(command) or `command` Process substitution allows the input or output of a command to appear as a file. If >(list) is used, writing to the file will provide input for a list. If <(list) is used, the file passed as an argument will be read to obtain the output of list. [This one needs a bit more explaining]","title":"General"},{"location":"Terminal/syntax.html#directory-shortcuts","text":"Directory Where it leads to ~ Home directory / Root directory . Working (or current) directory .. Parent directory - Previous directory (only for cd)","title":"Directory Shortcuts"},{"location":"Terminal/syntax.html#brace-expansion","text":"Below brace exanpsion will be described via the following set of examples Take careful notice on the spacing, it's important Example Result and/or Comments echo \"I love \"{Bach,Beethoven,Brahms} \"I love Bach I love Beethoven I love Brahms\" echo {a..z} \"a b c d e f g h i j k l m n o p q r s t u v w x y z\" echo {1..9} \"1 2 3 4 5 6 7 8 9\" mkdir {2008..2017}-{01-12} Makes directories for all 12 months in all those years","title":"Brace Expansion"}]}